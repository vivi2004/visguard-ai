/**
 * @since 3.14.0
 * @experimental
 */
import * as Context from "./Context.js";
import * as Effect from "./Effect.js";
import { identity } from "./Function.js";
import * as Layer from "./Layer.js";
import * as RcMap from "./RcMap.js";
import * as Scope from "./Scope.js";
/**
 * @since 3.14.0
 * @category Symbols
 */
export const TypeId = /*#__PURE__*/Symbol.for("effect/LayerMap");
/**
 * @since 3.14.0
 * @category Constructors
 * @experimental
 *
 * A `LayerMap` allows you to create a map of Layer's that can be used to
 * dynamically access resources based on a key.
 *
 * ```ts
 * import { Completions } from "@effect/ai"
 * import { OpenAiClient, OpenAiCompletions } from "@effect/ai-openai"
 * import { FetchHttpClient } from "@effect/platform"
 * import { NodeRuntime } from "@effect/platform-node"
 * import { Config, Effect, Layer, LayerMap } from "effect"
 *
 * // create the openai client layer
 * const OpenAiLayer = OpenAiClient.layerConfig({
 *   apiKey: Config.redacted("OPENAI_API_KEY")
 * }).pipe(Layer.provide(FetchHttpClient.layer))
 *
 * // create a service that wraps a LayerMap
 * class AiClients extends LayerMap.Service<AiClients>()("AiClients", {
 *   // this LayerMap will provide the ai Completions service
 *   provides: Completions.Completions,
 *
 *   // define the lookup function for the layer map
 *   //
 *   // The returned Layer will be used to provide the Completions service for the
 *   // given model.
 *   lookup: (model: OpenAiCompletions.Model) => OpenAiCompletions.layer({ model }),
 *
 *   // If a layer is not used for a certain amount of time, it can be removed
 *   idleTimeToLive: "5 seconds",
 *
 *   // Supply the dependencies for the layers in the LayerMap
 *   dependencies: [OpenAiLayer]
 * }) {}
 *
 * // usage
 * Effect.gen(function*() {
 *   // access and use the generic Completions service
 *   const ai = yield* Completions.Completions
 *   const response = yield* ai.create("Hello, world!")
 *   console.log(response.text)
 * }).pipe(
 *   // use the AiClients service to provide a variant of the Completions service
 *   AiClients.provide("gpt-4o"),
 *   // provide the LayerMap service
 *   Effect.provide(AiClients.Default),
 *   NodeRuntime.runMain
 * )
 * ```
 */
export const make = /*#__PURE__*/Effect.fnUntraced(function* (tagOrAccessor, lookup, options) {
  const context = yield* Effect.context();
  // If we are inside another layer build, use the current memo map,
  // otherwise create a new one.
  const memoMap = context.unsafeMap.has(Layer.CurrentMemoMap.key) ? Context.get(context, Layer.CurrentMemoMap) : yield* Layer.makeMemoMap;
  const rcMap = yield* RcMap.make({
    lookup: Effect.fnUntraced(function* (key) {
      const scope = yield* Effect.scope;
      const context = yield* Layer.buildWithMemoMap(lookup(key), memoMap, scope);
      const service = yield* Effect.provide(tagOrAccessor, context);
      return [context, service];
    }),
    idleTimeToLive: options?.idleTimeToLive
  });
  return identity({
    [TypeId]: TypeId,
    rcMap,
    get: key => Effect.map(RcMap.get(rcMap, key), ([, service]) => service),
    provide: key => effect => Effect.scopedWith(scope => Effect.flatMap(Scope.extend(RcMap.get(rcMap, key), scope), ([context]) => Effect.provide(effect, context))),
    invalidate: key => RcMap.invalidate(rcMap, key)
  });
});
/**
 * @since 3.14.0
 * @category Constructors
 * @experimental
 */
export const fromRecord = (tagOrAccessor, layers, options) => make(tagOrAccessor, key => layers[key], options);
/**
 * @since 3.14.0
 * @category Service
 * @experimental
 *
 * Create a `LayerMap` service that provides a dynamic set of resources based on
 * a key.
 *
 * ```ts
 * import { Completions } from "@effect/ai"
 * import { OpenAiClient, OpenAiCompletions } from "@effect/ai-openai"
 * import { FetchHttpClient } from "@effect/platform"
 * import { NodeRuntime } from "@effect/platform-node"
 * import { Config, Effect, Layer, LayerMap } from "effect"
 *
 * // create the openai client layer
 * const OpenAiLayer = OpenAiClient.layerConfig({
 *   apiKey: Config.redacted("OPENAI_API_KEY")
 * }).pipe(Layer.provide(FetchHttpClient.layer))
 *
 * // create a service that wraps a LayerMap
 * class AiClients extends LayerMap.Service<AiClients>()("AiClients", {
 *   // this LayerMap will provide the ai Completions service
 *   provides: Completions.Completions,
 *
 *   // define the lookup function for the layer map
 *   //
 *   // The returned Layer will be used to provide the Completions service for the
 *   // given model.
 *   lookup: (model: OpenAiCompletions.Model) => OpenAiCompletions.layer({ model }),
 *
 *   // If a layer is not used for a certain amount of time, it can be removed
 *   idleTimeToLive: "5 seconds",
 *
 *   // Supply the dependencies for the layers in the LayerMap
 *   dependencies: [OpenAiLayer]
 * }) {}
 *
 * // usage
 * Effect.gen(function*() {
 *   // access and use the generic Completions service
 *   const ai = yield* Completions.Completions
 *   const response = yield* ai.create("Hello, world!")
 *   console.log(response.text)
 * }).pipe(
 *   // use the AiClients service to provide a variant of the Completions service
 *   AiClients.provide("gpt-4o"),
 *   // provide the LayerMap service
 *   Effect.provide(AiClients.Default),
 *   NodeRuntime.runMain
 * )
 * ```
 */
export const Service = () => (id, options) => {
  const Err = globalThis.Error;
  const limit = Err.stackTraceLimit;
  Err.stackTraceLimit = 2;
  const creationError = new Err();
  Err.stackTraceLimit = limit;
  function TagClass() {}
  const TagClass_ = TagClass;
  Object.setPrototypeOf(TagClass, Object.getPrototypeOf(Context.GenericTag(id)));
  TagClass.key = id;
  Object.defineProperty(TagClass, "stack", {
    get() {
      return creationError.stack;
    }
  });
  TagClass_.get = key => Effect.flatMap(TagClass_, layerMap => layerMap.get(key));
  TagClass_.provide = key => effect => Effect.flatMap(TagClass_, layerMap => layerMap.provide(key)(effect));
  TagClass_.invalidate = key => Effect.flatMap(TagClass_, layerMap => layerMap.invalidate(key));
  TagClass_.DefaultWithoutDependencies = Layer.scoped(TagClass_, "lookup" in options ? make(options.provides, options.lookup, options) : fromRecord(options.provides, options.layers, options));
  TagClass_.Default = options.dependencies && options.dependencies.length > 0 ? Layer.provide(TagClass_.DefaultWithoutDependencies, options.dependencies) : TagClass_.DefaultWithoutDependencies;
  return TagClass;
};
//# sourceMappingURL=LayerMap.js.map